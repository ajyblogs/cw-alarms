AWSTemplateFormatVersion: '2010-09-09'
Description: 'EC2 Scheduler with Lambda function and EventBridge rules'

Parameters:
  EC2InstanceIds:
    Type: String
    Description: 'Comma-separated list of EC2 instance IDs to schedule'
    Default: 'i-12345abcdef67890'
  
  LambdaFunctionName:
    Type: String
    Description: 'Name for the Lambda function'
    Default: 'EC2Scheduler'

  SchedulerIAMRoleName:
    Type: String
    Description: 'Name for the IAM role that allows Lambda to manage EC2 instances'
    Default: 'EC2SchedulerRole'

Resources:
  # IAM Role for Lambda function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref SchedulerIAMRoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: EC2ManagementPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:StartInstances'
                  - 'ec2:StopInstances'
                  - 'ec2:DescribeInstances'
                Resource: '*'

  # Lambda function for managing EC2 instances
  EC2SchedulerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaFunctionName
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 30
      Environment:
        Variables:
          EC2_INSTANCE_IDS: !Ref EC2InstanceIds
      Code:
        ZipFile: |
          import boto3
          import os
          import logging
          
          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          def lambda_handler(event, context):
              # Get EC2 instance IDs from environment variable
              instance_ids_str = os.environ.get('EC2_INSTANCE_IDS', '')
              
              if not instance_ids_str:
                  error_msg = "No EC2 instance IDs provided in environment variables"
                  logger.error(error_msg)
                  return {
                      'statusCode': 400,
                      'body': error_msg
                  }
              
              # Convert comma-separated string to list
              instance_ids = [id.strip() for id in instance_ids_str.split(',')]
              
              # Get AWS region from environment or default to us-east-1
              region = os.environ.get('AWS_REGION', 'us-east-1')
              
              # Initialize EC2 client
              ec2 = boto3.client('ec2', region_name=region)
              
              # Determine action from the event
              action = event.get('action', '').lower()
              
              if action == 'start':
                  try:
                      response = ec2.start_instances(InstanceIds=instance_ids)
                      started_instances = [instance['InstanceId'] for instance in response['StartingInstances']]
                      
                      logger.info(f"Successfully started instances: {started_instances}")
                      return {
                          'statusCode': 200,
                          'body': f"Successfully started instances: {started_instances}"
                      }
                      
                  except Exception as e:
                      error_msg = f"Error starting instances: {str(e)}"
                      logger.error(error_msg)
                      return {
                          'statusCode': 500,
                          'body': error_msg
                      }
                      
              elif action == 'stop':
                  try:
                      response = ec2.stop_instances(InstanceIds=instance_ids)
                      stopped_instances = [instance['InstanceId'] for instance in response['StoppingInstances']]
                      
                      logger.info(f"Successfully stopped instances: {stopped_instances}")
                      return {
                          'statusCode': 200,
                          'body': f"Successfully stopped instances: {stopped_instances}"
                      }
                      
                  except Exception as e:
                      error_msg = f"Error stopping instances: {str(e)}"
                      logger.error(error_msg)
                      return {
                          'statusCode': 500,
                          'body': error_msg
                      }
              
              else:
                  error_msg = f"Invalid action: {action}. Use 'start' or 'stop'."
                  logger.error(error_msg)
                  return {
                      'statusCode': 400,
                      'body': error_msg
                  }

  # EventBridge rule for starting instances at 8 AM EST (13:00 UTC)
  StartInstancesRule:
    Type: AWS::Events::Rule
    Properties:
      Name: StartEC2InstancesAt8AMEST
      Description: 'Rule to start EC2 instances at 8 AM EST'
      ScheduleExpression: 'cron(0 13 * * ? *)'
      State: ENABLED
      Targets:
        - Id: StartInstancesTarget
          Arn: !GetAtt EC2SchedulerFunction.Arn
          Input: '{"action": "start"}'

  # EventBridge rule for stopping instances at 10 PM EST (3:00 UTC next day)
  StopInstancesRule:
    Type: AWS::Events::Rule
    Properties:
      Name: StopEC2InstancesAt10PMEST
      Description: 'Rule to stop EC2 instances at 10 PM EST'
      ScheduleExpression: 'cron(0 3 * * ? *)'
      State: ENABLED
      Targets:
        - Id: StopInstancesTarget
          Arn: !GetAtt EC2SchedulerFunction.Arn
          Input: '{"action": "stop"}'

  # Permission for EventBridge to invoke Lambda for start
  StartPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref EC2SchedulerFunction
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt StartInstancesRule.Arn

  # Permission for EventBridge to invoke Lambda for stop
  StopPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref EC2SchedulerFunction
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt StopInstancesRule.Arn

Outputs:
  LambdaFunctionArn:
    Description: 'ARN of the created Lambda function'
    Value: !GetAtt EC2SchedulerFunction.Arn
  
  StartScheduleRuleArn:
    Description: 'ARN of the EventBridge rule for starting instances'
    Value: !GetAtt StartInstancesRule.Arn
  
  StopScheduleRuleArn:
    Description: 'ARN of the EventBridge rule for stopping instances'
    Value: !GetAtt StopInstancesRule.Arn